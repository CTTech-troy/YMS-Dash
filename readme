import React, { useEffect, useRef, useState } from 'react';
import DashboardLayout from '../../components/DashboardLayout';
import { PlusIcon, EyeIcon, PencilIcon, TrashIcon, MessageCircleIcon, X as XIcon } from 'lucide-react';
import { toast } from 'sonner';

// Reusable Modal component (handles backdrop, escape, focus, body scroll lock)
const Modal = ({ open, title, onClose, children, className = '' }) => {
  const containerRef = useRef(null);

  useEffect(() => {
    if (!open) return;
    const prevOverflow = document.body.style.overflow;
    document.body.style.overflow = 'hidden';

    const onKey = (e) => {
      if (e.key === 'Escape') onClose();
    };
    document.addEventListener('keydown', onKey);

    // focus first focusable element inside modal
    requestAnimationFrame(() => {
      const node = containerRef.current;
      if (!node) return;
      const focusable = node.querySelector('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
      if (focusable) focusable.focus();
      else node.focus();
    });

    return () => {
      document.body.style.overflow = prevOverflow;
      document.removeEventListener('keydown', onKey);
    };
  }, [open, onClose]);

  if (!open) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center px-4 py-6" aria-modal="true" role="dialog">
      <div className="fixed inset-0 bg-black/50" onClick={onClose} />
      <div
        ref={containerRef}
        onClick={(e) => e.stopPropagation()}
        tabIndex={-1}
        className={`relative bg-white rounded-lg shadow-xl max-h-[90vh] w-full sm:max-w-4xl overflow-auto p-6 z-10 ${className}`}
      >
        <div className="flex items-start justify-between mb-4">
          <h3 className="text-lg font-medium text-gray-900">{title}</h3>
          <button onClick={onClose} className="text-gray-500 hover:text-gray-800" aria-label="Close modal">
            <XIcon className="h-5 w-5" />
          </button>
        </div>
        <div>{children}</div>
      </div>
    </div>
  );
};

// Sample students data
const students = [{
  id: 1,
  name: 'Alex Johnson',
  uid: 'YMS-001',
  picture: 'https://images.unsplash.com/photo-1568602471122-7832951cc4c5?ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80'
}, {
  id: 2,
  name: 'Sarah Brown',
  uid: 'YMS-004',
  picture: 'https://images.unsplash.com/photo-1544005313-94ddf0286df2?ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80'
}, {
  id: 3,
  name: 'James Wilson',
  uid: 'YMS-005',
  picture: 'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80'
}, {
  id: 4,
  name: 'Emily Davis',
  uid: 'YMS-002',
  picture: 'https://images.unsplash.com/photo-1580489944761-15a19d654956?ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80'
}, {
  id: 5,
  name: 'Michael Wilson',
  uid: 'YMS-003',
  picture: 'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80'
}];
// Sample subjects
const defaultSubjects = [{
  id: 1,
  name: 'Mathematics'
}, {
  id: 2,
  name: 'English Language'
}, {
  id: 3,
  name: 'Science'
}, {
  id: 4,
  name: 'Social Studies'
}, {
  id: 5,
  name: 'Physical Education'
}, {
  id: 6,
  name: 'Art'
}, {
  id: 7,
  name: 'Music'
}, {
  id: 8,
  name: 'Computer Studies'
}];
// Sample results data
const initialResults = [{
  id: 1,
  studentId: 1,
  session: '2022/2023',
  term: 'First Term',
  subjects: [{
    id: 1,
    name: 'Mathematics',
    firstTest: 25,
    secondTest: 18,
    thirdTest: 28,
    exam: 65,
    total: 136,
    percentage: 68,
    grade: 'B'
  }, {
    id: 2,
    name: 'English Language',
    firstTest: 27,
    secondTest: 20,
    thirdTest: 25,
    exam: 70,
    total: 142,
    percentage: 71,
    grade: 'B'
  }, {
    id: 3,
    name: 'Science',
    firstTest: 28,
    secondTest: 22,
    thirdTest: 29,
    exam: 75,
    total: 154,
    percentage: 77,
    grade: 'A'
  }],
  teacherComment: 'Alex is a diligent student. Needs to improve in some areas.',
  commentStatus: true,
  createdAt: '2023-01-15'
}, {
  id: 2,
  studentId: 2,
  session: '2022/2023',
  term: 'First Term',
  subjects: [{
    id: 1,
    name: 'Mathematics',
    firstTest: 22,
    secondTest: 15,
    thirdTest: 20,
    exam: 60,
    total: 117,
    percentage: 58.5,
    grade: 'C'
  }, {
    id: 2,
    name: 'English Language',
    firstTest: 24,
    secondTest: 18,
    thirdTest: 22,
    exam: 65,
    total: 129,
    percentage: 64.5,
    grade: 'C'
  }],
  teacherComment: '',
  commentStatus: false,
  createdAt: '2023-01-15'
}];

const TeacherResults = () => {
  const [results, setResults] = useState(initialResults);
  const [showAddModal, setShowAddModal] = useState(false);
  const [showViewModal, setShowViewModal] = useState(false);
  const [showCommentModal, setShowCommentModal] = useState(false);
  const [selectedResult, setSelectedResult] = useState(null);
  const [selectedStudent, setSelectedStudent] = useState(null);
  const [comment, setComment] = useState('');
  const [subjects, setSubjects] = useState([]);
  const [formData, setFormData] = useState({
    studentId: '',
    session: '',
    term: '',
    subjects: [],
    teacherComment: ''
  });

  // Fetch teacher's subjects from profile (simulate)
  useEffect(() => {
    const teacherProfile = {
      subjects: ['Mathematics', 'English Language', 'Science', 'Social Studies', 'Physical Education', 'Art']
    };
    const formattedSubjects = teacherProfile.subjects.map((name, index) => ({
      id: index + 1,
      name
    }));
    setSubjects(formattedSubjects);
  }, []);

  // Calculate grade based on percentage
  const calculateGrade = percentage => {
    if (percentage >= 90) return 'A+';
    if (percentage >= 75) return 'A';
    if (percentage >= 65) return 'B';
    if (percentage >= 55) return 'C';
    if (percentage >= 45) return 'D';
    if (percentage >= 40) return 'E';
    return 'F';
  };

  // Calculate total and percentage
  const calculateTotal = (firstTest, secondTest, thirdTest, exam) => {
    const total = (firstTest || 0) + (secondTest || 0) + (thirdTest || 0) + (exam || 0);
    // full marks = 200 (30+30+30+110) -> percentage = (total/200)*100
    const percentage = total > 0 ? (total / 200) * 100 : 0;
    return {
      total,
      percentage,
      grade: calculateGrade(percentage)
    };
  };

  // Handle form input changes for student selection
  const handleStudentChange = e => {
    const studentId = parseInt(e.target.value);
    setFormData(prev => ({
      ...prev,
      studentId
    }));
    setSelectedStudent(students.find(student => student.id === studentId) || null);
  };

  // Handle form input changes for general fields
  const handleInputChange = e => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Handle subject selection
  const handleSubjectToggle = subjectId => {
    setFormData(prevData => {
      const isSelected = prevData.subjects.some(s => s.id === subjectId);
      if (isSelected) {
        return {
          ...prevData,
          subjects: prevData.subjects.filter(s => s.id !== subjectId)
        };
      } else {
        const subject = subjects.find(s => s.id === subjectId) || defaultSubjects.find(s => s.id === subjectId);
        return {
          ...prevData,
          subjects: [...prevData.subjects, {
            id: subject.id,
            name: subject.name,
            firstTest: 0,
            secondTest: 0,
            thirdTest: 0,
            exam: 0,
            total: 0,
            percentage: 0,
            grade: 'F'
          }]
        };
      }
    });
  };

  // Handle subject score changes
  const handleSubjectScoreChange = (subjectId, field, value) => {
    const numValue = parseInt(value) || 0;
    setFormData(prevData => {
      const updatedSubjects = prevData.subjects.map(subject => {
        if (subject.id === subjectId) {
          const updatedSubject = { ...subject, [field]: numValue };
          if (['firstTest', 'secondTest', 'thirdTest', 'exam'].includes(field)) {
            const { total, percentage, grade } = calculateTotal(
              field === 'firstTest' ? numValue : subject.firstTest,
              field === 'secondTest' ? numValue : subject.secondTest,
              field === 'thirdTest' ? numValue : subject.thirdTest,
              field === 'exam' ? numValue : subject.exam
            );
            updatedSubject.total = total;
            updatedSubject.percentage = percentage;
            updatedSubject.grade = grade;
          }
          return updatedSubject;
        }
        return subject;
      });
      return { ...prevData, subjects: updatedSubjects };
    });
  };

  // Handle form submission for adding a new result
  const handleSubmit = e => {
    e.preventDefault();
    if (!formData.studentId) {
      toast.error('Please select a student');
      return;
    }
    if (formData.subjects.length === 0) {
      toast.error('Please select at least one subject');
      return;
    }
    // Create new result object
    const newResult = {
      id: results.length + 1,
      studentId: formData.studentId,
      session: formData.session,
      term: formData.term,
      subjects: formData.subjects,
      teacherComment: formData.teacherComment,
      commentStatus: formData.teacherComment.trim() !== '',
      createdAt: new Date().toISOString().split('T')[0]
    };
    setResults(prev => [...prev, newResult]);
    setFormData({
      studentId: '',
      session: '',
      term: '',
      subjects: [],
      teacherComment: ''
    });
    setSelectedStudent(null);
    setShowAddModal(false);
    toast.success('Result added successfully!');
  };

  // Handle result deletion
  const handleDeleteResult = id => {
    if (window.confirm('Are you sure you want to delete this result?')) {
      setResults(prev => prev.filter(result => result.id !== id));
      toast.success('Result deleted successfully!');
    }
  };

  // View result details
  const handleViewResult = result => {
    setSelectedResult(result);
    setShowViewModal(true);
  };

  // Open comment modal
  const handleOpenCommentModal = result => {
    setSelectedResult(result);
    setComment(result.teacherComment || '');
    setShowCommentModal(true);
  };

  // Save comment
  const handleSaveComment = () => {
    if (!selectedResult) return;
    const updatedResults = results.map(result => {
      if (result.id === selectedResult.id) {
        return { ...result, teacherComment: comment, commentStatus: comment.trim() !== '' };
      }
      return result;
    });
    setResults(updatedResults);
    setShowCommentModal(false);
    toast.success('Comment saved successfully!');
  };

  // Calculate overall grade for a result
  const calculateOverallGrade = subjectsArr => {
    if (!subjectsArr || subjectsArr.length === 0) return { percentage: 0, grade: 'F' };
    const totalPercentage = subjectsArr.reduce((sum, subject) => sum + (subject.percentage || 0), 0);
    const overallPercentage = totalPercentage / subjectsArr.length;
    const overallGrade = calculateGrade(overallPercentage);
    return { percentage: parseFloat(overallPercentage.toFixed(1)), grade: overallGrade };
  };

  return (
    <DashboardLayout title="Results Management">
      {/* Header with Add Result button */}
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-semibold text-gray-900">Student Results</h1>
        <button
          type="button"
          className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          onClick={() => setShowAddModal(true)}
        >
          <PlusIcon className="h-5 w-5 mr-2" />
          Add Result
        </button>
      </div>

      {/* Results Table */}
      <div className="bg-white shadow rounded-lg overflow-hidden">
        <div className="px-6 py-4 border-b border-gray-200">
          <h2 className="text-lg font-medium text-gray-900">Student Results</h2>
        </div>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Student</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Session / Term</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Subjects</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Overall Grade</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Comment Status</th>
                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {results.map(result => {
                const student = students.find(s => s.id === result.studentId);
                const { percentage, grade } = calculateOverallGrade(result.subjects);
                return student ? (
                  <tr key={result.id}>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <div className="flex-shrink-0 h-10 w-10">
                          <img className="h-10 w-10 rounded-full" src={student.picture} alt="" />
                        </div>
                        <div className="ml-4">
                          <div className="text-sm font-medium text-gray-900">{student.name}</div>
                          <div className="text-sm text-gray-500">{student.uid}</div>
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">{result.session}</div>
                      <div className="text-sm text-gray-500">{result.term}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{result.subjects.length} subjects</td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">{percentage}%</div>
                      <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${grade === 'A+' || grade === 'A' ? 'bg-green-100 text-green-800' : grade === 'B' ? 'bg-blue-100 text-blue-800' : grade === 'C' ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800'}`}>Grade {grade}</span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${result.commentStatus ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                        {result.commentStatus ? 'Added' : 'Not Added'}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <button onClick={() => handleViewResult(result)} className="text-blue-600 hover:text-blue-900 mr-3" aria-label="View result">
                        <EyeIcon className="h-5 w-5" />
                      </button>
                      <button onClick={() => handleOpenCommentModal(result)} className="text-green-600 hover:text-green-900 mr-3" aria-label="Add comment">
                        <MessageCircleIcon className="h-5 w-5" />
                      </button>
                      <button className="text-indigo-600 hover:text-indigo-900 mr-3" aria-label="Edit result">
                        <PencilIcon className="h-5 w-5" />
                      </button>
                      <button onClick={() => handleDeleteResult(result.id)} className="text-red-600 hover:text-red-900" aria-label="Delete result">
                        <TrashIcon className="h-5 w-5" />
                      </button>
                    </td>
                  </tr>
                ) : null;
              })}
              {results.length === 0 && (
                <tr>
                  <td colSpan="6" className="px-6 py-4 text-center text-sm text-gray-500">No results found. Click "Add Result" to add a new result.</td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>

      {/* Add Result Modal */}
      <Modal open={showAddModal} title="Add New Result" onClose={() => setShowAddModal(false)}>
        <form onSubmit={handleSubmit}>
          <div className="space-y-6">
            <div className="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-3">
              <div>
                <label htmlFor="studentId" className="block text-sm font-medium text-gray-700">Student</label>
                <select id="studentId" name="studentId" required value={formData.studentId} onChange={handleStudentChange} className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md">
                  <option value="">Select a student</option>
                  {students.map(student => <option key={student.id} value={student.id}>{student.name} ({student.uid})</option>)}
                </select>
              </div>
              <div>
                <label htmlFor="session" className="block text-sm font-medium text-gray-700">Session</label>
                <select id="session" name="session" required value={formData.session} onChange={handleInputChange} className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md">
                  <option value="">Select session</option>
                  <option value="2025/2026">2025/2026</option>
                  <option value="2026/2027">2026/2027</option>
                  <option value="2027/2028">2027/2028</option>
                </select>
              </div>
              <div>
                <label htmlFor="term" className="block text-sm font-medium text-gray-700">Term</label>
                <select id="term" name="term" required value={formData.term} onChange={handleInputChange} className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md">
                  <option value="">Select term</option>
                  <option value="First Term">First Term</option>
                  <option value="Second Term">Second Term</option>
                  <option value="Third Term">Third Term</option>
                </select>
              </div>
            </div>

            {selectedStudent && (
              <>
                <div className="border-t border-gray-200 pt-4">
                  <h4 className="text-sm font-medium text-gray-900 mb-4">Select Subjects for {selectedStudent.name}</h4>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
                    {subjects.map(subject => (
                      <div key={subject.id} className="flex items-center">
                        <input id={`subject-${subject.id}`} type="checkbox" checked={formData.subjects.some(s => s.id === subject.id)} onChange={() => handleSubjectToggle(subject.id)} className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                        <label htmlFor={`subject-${subject.id}`} className="ml-2 block text-sm text-gray-900">{subject.name}</label>
                      </div>
                    ))}
                  </div>

                  {formData.subjects.length > 0 && (
                    <div>
                      <h4 className="text-sm font-medium text-gray-900 mb-4">Enter Scores</h4>
                      <div className="overflow-x-auto">
                        <table className="min-w-full divide-y divide-gray-200">
                          <thead className="bg-gray-50">
                            <tr>
                              <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Subject</th>
                              <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">1st Test (30)</th>
                              <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">2nd Test (30)</th>
                              <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">3rd Test (30)</th>
                              <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Exam (110)</th>
                              <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
                              <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">%</th>
                              <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Grade</th>
                            </tr>
                          </thead>
                          <tbody className="bg-white divide-y divide-gray-200">
                            {formData.subjects.map(subject => (
                              <tr key={subject.id}>
                                <td className="px-3 py-2 whitespace-nowrap text-sm font-medium text-gray-900">{subject.name}</td>
                                <td className="px-3 py-2 whitespace-nowrap">
                                  <input type="number" min="0" max="30" value={subject.firstTest} onChange={e => handleSubjectScoreChange(subject.id, 'firstTest', e.target.value)} className="w-16 focus:ring-blue-500 focus:border-blue-500 block shadow-sm sm:text-sm border-gray-300 rounded-md" />
                                </td>
                                <td className="px-3 py-2 whitespace-nowrap">
                                  <input type="number" min="0" max="30" value={subject.secondTest} onChange={e => handleSubjectScoreChange(subject.id, 'secondTest', e.target.value)} className="w-16 focus:ring-blue-500 focus:border-blue-500 block shadow-sm sm:text-sm border-gray-300 rounded-md" />
                                </td>
                                <td className="px-3 py-2 whitespace-nowrap">
                                  <input type="number" min="0" max="30" value={subject.thirdTest} onChange={e => handleSubjectScoreChange(subject.id, 'thirdTest', e.target.value)} className="w-16 focus:ring-blue-500 focus:border-blue-500 block shadow-sm sm:text-sm border-gray-300 rounded-md" />
                                </td>
                                <td className="px-3 py-2 whitespace-nowrap">
                                  <input type="number" min="0" max="110" value={subject.exam} onChange={e => handleSubjectScoreChange(subject.id, 'exam', e.target.value)} className="w-16 focus:ring-blue-500 focus:border-blue-500 block shadow-sm sm:text-sm border-gray-300 rounded-md" />
                                </td>
                                <td className="px-3 py-2 whitespace-nowrap text-sm text-gray-900">{subject.total}</td>
                                <td className="px-3 py-2 whitespace-nowrap text-sm text-gray-900">{(subject.percentage || 0).toFixed(1)}%</td>
                                <td className="px-3 py-2 whitespace-nowrap">
                                  <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${subject.grade === 'A+' || subject.grade === 'A' ? 'bg-green-100 text-green-800' : subject.grade === 'B' ? 'bg-blue-100 text-blue-800' : subject.grade === 'C' ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800'}`}>{subject.grade}</span>
                                </td>
                              </tr>
                            ))}
                          </tbody>
                        </table>
                      </div>
                    </div>
                  )}

                  <div className="mt-6">
                    <label htmlFor="teacherComment" className="block text-sm font-medium text-gray-700">Teacher's Comment</label>
                    <textarea id="teacherComment" name="teacherComment" rows={3} value={formData.teacherComment} onChange={handleInputChange} className="mt-1 focus:ring-blue-500 focus:border-blue-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" placeholder="Enter your comment about the student's performance" />
                  </div>
                </div>
              </>
            )}

            <div className="flex justify-end space-x-2 pt-4 border-t border-gray-100">
              <button type="button" onClick={() => setShowAddModal(false)} className="px-4 py-2 rounded border bg-white">Cancel</button>
              <button type="submit" className="px-4 py-2 rounded bg-blue-600 text-white">Add Result</button>
            </div>
          </div>
        </form>
      </Modal>

      {/* View Result Modal */}
      <Modal open={showViewModal} title="Result Card" onClose={() => setShowViewModal(false)} className="sm:max-w-4xl">
        {selectedResult && (
          <div>
            <div className="flex items-center justify-between mb-4">
              <div>
                <h4 className="text-sm font-medium text-gray-500">Student Name</h4>
                <p className="text-sm text-gray-900">{students.find(s => s.id === selectedResult.studentId)?.name}</p>
              </div>
              <div>
                <h4 className="text-sm font-medium text-gray-500">Student ID</h4>
                <p className="text-sm text-gray-900">{students.find(s => s.id === selectedResult.studentId)?.uid}</p>
              </div>
              <div>
                <h4 className="text-sm font-medium text-gray-500">Class</h4>
                <p className="text-sm text-gray-900">Class 4B</p>
              </div>
            </div>

            <div className="border-t border-gray-200 pt-4">
              <h4 className="text-sm font-medium text-gray-900 mb-4">Subject Results</h4>
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Subject</th>
                      <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">1st Test</th>
                      <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">2nd Test</th>
                      <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">3rd Test</th>
                      <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Exam</th>
                      <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
                      <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">%</th>
                      <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Grade</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {selectedResult.subjects.map((subject, index) => (
                      <tr key={index}>
                        <td className="px-3 py-2 whitespace-nowrap text-sm font-medium text-gray-900">{subject.name}</td>
                        <td className="px-3 py-2 whitespace-nowrap text-sm text-gray-500">{subject.firstTest}</td>
                        <td className="px-3 py-2 whitespace-nowrap text-sm text-gray-500">{subject.secondTest}</td>
                        <td className="px-3 py-2 whitespace-nowrap text-sm text-gray-500">{subject.thirdTest}</td>
                        <td className="px-3 py-2 whitespace-nowrap text-sm text-gray-500">{subject.exam}</td>
                        <td className="px-3 py-2 whitespace-nowrap text-sm text-gray-900">{subject.total}</td>
                        <td className="px-3 py-2 whitespace-nowrap text-sm text-gray-900">{(subject.percentage || 0).toFixed(1)}%</td>
                        <td className="px-3 py-2 whitespace-nowrap">
                          <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${subject.grade === 'A+' || subject.grade === 'A' ? 'bg-green-100 text-green-800' : subject.grade === 'B' ? 'bg-blue-100 text-blue-800' : subject.grade === 'C' ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800'}`}>{subject.grade}</span>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>

              <div className="mt-6 grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-3">
                <div>
                  <h4 className="text-sm font-medium text-gray-700">Overall Percentage</h4>
                  <p className="mt-1 text-lg font-medium text-gray-900">{calculateOverallGrade(selectedResult.subjects).percentage}%</p>
                </div>
                <div>
                  <h4 className="text-sm font-medium text-gray-700">Overall Grade</h4>
                  <p className="mt-1">
                    <span className={`px-2 py-1 inline-flex text-sm leading-5 font-semibold rounded-full ${calculateOverallGrade(selectedResult.subjects).grade === 'A+' || calculateOverallGrade(selectedResult.subjects).grade === 'A' ? 'bg-green-100 text-green-800' : calculateOverallGrade(selectedResult.subjects).grade === 'B' ? 'bg-blue-100 text-blue-800' : calculateOverallGrade(selectedResult.subjects).grade === 'C' ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800'}`}>{calculateOverallGrade(selectedResult.subjects).grade}</span>
                  </p>
                </div>
                <div>
                  <h4 className="text-sm font-medium text-gray-700">Comment Status</h4>
                  <p className="mt-1"><span className={`px-2 py-1 inline-flex text-sm leading-5 font-semibold rounded-full ${selectedResult.commentStatus ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>{selectedResult.commentStatus ? 'Added' : 'Not Added'}</span></p>
                </div>
              </div>

              {selectedResult.teacherComment && (
                <div className="mt-6 border-t border-gray-200 pt-4">
                  <h4 className="text-sm font-medium text-gray-700">Teacher's Comment</h4>
                  <p className="mt-1 text-sm text-gray-900">{selectedResult.teacherComment}</p>
                </div>
              )}
            </div>
          </div>
        )}
      </Modal>

      {/* Comment Modal */}
      {showCommentModal && selectedResult && (
        <Modal open={showCommentModal} title="Add Teacher Comment" onClose={() => setShowCommentModal(false)} className="sm:max-w-lg">
          <div className="px-4 py-5 sm:p-6">
            <div className="sm:flex sm:items-start">
              <div className="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                <div className="flex justify-between items-center">
                  <h3 className="text-lg leading-6 font-medium text-gray-900">Add Teacher Comment</h3>
                </div>
                <div className="mt-2">
                  <p className="text-sm text-gray-500">
                    Student: {students.find(s => s.id === selectedResult.studentId)?.name} | {selectedResult.session} - {selectedResult.term}
                  </p>
                </div>
                <div className="mt-4">
                  <label htmlFor="teacherComment" className="block text-sm font-medium text-gray-700">Comment</label>
                  <textarea id="teacherComment" rows={4} value={comment} onChange={e => setComment(e.target.value)} className="mt-1 focus:ring-blue-500 focus:border-blue-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" placeholder="Enter your comment about the student's performance" />
                </div>
                <div className="mt-4">
                  <div className="grid grid-cols-1 gap-y-2 gap-x-3 sm:grid-cols-3">
                    <button type="button" className="inline-flex items-center px-2.5 py-1.5 border border-transparent text-xs font-medium rounded text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500" onClick={() => setComment('Excellent work! Keep up the high standards.')}>
                      Positive
                    </button>
                    <button type="button" className="inline-flex items-center px-2.5 py-1.5 border border-transparent text-xs font-medium rounded text-white bg-yellow-600 hover:bg-yellow-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500" onClick={() => setComment('Needs to improve in some subjects. Work harder next term.')}>
                      Warning
                    </button>
                    <button type="button" className="inline-flex items-center px-2.5 py-1.5 border border-transparent text-xs font-medium rounded text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500" onClick={() => setComment('Good progress. Keep it up!')}>
                      General
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
            <button type="button" className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:ml-3 sm:w-auto sm:text-sm" onClick={handleSaveComment}>
              Save Comment
            </button>
            <button type="button" className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm" onClick={() => setShowCommentModal(false)}>
              Cancel
            </button>
          </div>
        </Modal>
      )}
    </DashboardLayout>
  );
};
export default TeacherResults;